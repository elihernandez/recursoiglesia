generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Artist {
  id          String       @id @default(uuid())
  path        String?
  name        String
  imgUrl      String
  multitracks Multitrack[]
  albums      Album[]
}

model Album {
  id          String       @id @default(uuid())
  path        String?
  name        String
  imgUrl      String
  artistId    String?
  releaseDate DateTime     @db.Date
  artist      Artist?      @relation(fields: [artistId], references: [id])
  multitracks Multitrack[]
}

model Multitrack {
  id                 String              @id @unique @default(uuid())
  multitrackId       String              @unique
  path               String?
  name               String
  albumId            String?
  artistId           String?
  url                String?
  link               String?
  urlDate            DateTime?           @db.Date
  artist             Artist?             @relation(fields: [artistId], references: [id])
  album              Album?              @relation(fields: [albumId], references: [id])
  multitrackRequests MultitrackRequest[]
}

model Template {
  id     String  @id @default(uuid())
  path   String?
  name   String
  imgUrl String
  url    String?
  link   String?
}

model Software {
  id     String  @id @default(uuid())
  path   String?
  name   String
  imgUrl String
  url    String?
  link   String?
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique()
  password  String
  name      String
  createdAt DateTime @default(now())
}

model NewsletterSubscriber {
  id        String   @id @default(uuid())
  email     String   @unique()
  createdAt DateTime @default(now())
}

model MultitrackRequest {
  id           String   @id @default(uuid())
  email        String
  multitrackId String
  isSent       Boolean  @default(false)
  createdAt    DateTime @default(now())

  multitrack Multitrack? @relation(fields: [multitrackId], references: [multitrackId])
}

model Download {
  id         String   @id @default(uuid())
  resourceId String
  type       Int
  createdAt  DateTime @default(now())
}

model Product {
  id          Int                   @id @default(autoincrement())
  path        String?
  name        String
  description String?
  price       Float
  link        String
  images      Json?
  isActive    Boolean?              @default(true)
  categories  CategoriesOnProduct[]
}

model Category {
  id          Int                   @id @default(autoincrement())
  path        String?
  name        String
  description String?
  isActive    Boolean?              @default(true)
  products    CategoriesOnProduct[]
}

model CategoriesOnProduct {
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  @@id([productId, categoryId])
}
